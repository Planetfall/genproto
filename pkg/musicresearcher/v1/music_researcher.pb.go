// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.21.9
// source: Music-Researcher/api/music_researcher.proto

package musicresearcher

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Type int32

const (
	Type_UNKNOWN Type = 0
	Type_ARTIST  Type = 1
	Type_ALBUM   Type = 2
	Type_TRACK   Type = 3
)

// Enum value maps for Type.
var (
	Type_name = map[int32]string{
		0: "UNKNOWN",
		1: "ARTIST",
		2: "ALBUM",
		3: "TRACK",
	}
	Type_value = map[string]int32{
		"UNKNOWN": 0,
		"ARTIST":  1,
		"ALBUM":   2,
		"TRACK":   3,
	}
)

func (x Type) Enum() *Type {
	p := new(Type)
	*p = x
	return p
}

func (x Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Type) Descriptor() protoreflect.EnumDescriptor {
	return file_Music_Researcher_api_music_researcher_proto_enumTypes[0].Descriptor()
}

func (Type) Type() protoreflect.EnumType {
	return &file_Music_Researcher_api_music_researcher_proto_enumTypes[0]
}

func (x Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Type.Descriptor instead.
func (Type) EnumDescriptor() ([]byte, []int) {
	return file_Music_Researcher_api_music_researcher_proto_rawDescGZIP(), []int{0}
}

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Music_Researcher_api_music_researcher_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_Music_Researcher_api_music_researcher_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_Music_Researcher_api_music_researcher_proto_rawDescGZIP(), []int{0}
}

type GenreList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Genres []string `protobuf:"bytes,1,rep,name=Genres,proto3" json:"Genres,omitempty"`
}

func (x *GenreList) Reset() {
	*x = GenreList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Music_Researcher_api_music_researcher_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenreList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenreList) ProtoMessage() {}

func (x *GenreList) ProtoReflect() protoreflect.Message {
	mi := &file_Music_Researcher_api_music_researcher_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenreList.ProtoReflect.Descriptor instead.
func (*GenreList) Descriptor() ([]byte, []int) {
	return file_Music_Researcher_api_music_researcher_proto_rawDescGZIP(), []int{1}
}

func (x *GenreList) GetGenres() []string {
	if x != nil {
		return x.Genres
	}
	return nil
}

type Parameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query        string   `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	GenreFilters []string `protobuf:"bytes,2,rep,name=genreFilters,proto3" json:"genreFilters,omitempty"`
	Limit        int32    `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *Parameters) Reset() {
	*x = Parameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Music_Researcher_api_music_researcher_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Parameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Parameters) ProtoMessage() {}

func (x *Parameters) ProtoReflect() protoreflect.Message {
	mi := &file_Music_Researcher_api_music_researcher_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Parameters.ProtoReflect.Descriptor instead.
func (*Parameters) Descriptor() ([]byte, []int) {
	return file_Music_Researcher_api_music_researcher_proto_rawDescGZIP(), []int{2}
}

func (x *Parameters) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *Parameters) GetGenreFilters() []string {
	if x != nil {
		return x.GenreFilters
	}
	return nil
}

func (x *Parameters) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type Results struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Albums  []*Album  `protobuf:"bytes,1,rep,name=albums,proto3" json:"albums,omitempty"`
	Artists []*Artist `protobuf:"bytes,2,rep,name=artists,proto3" json:"artists,omitempty"`
	Tracks  []*Track  `protobuf:"bytes,3,rep,name=tracks,proto3" json:"tracks,omitempty"`
}

func (x *Results) Reset() {
	*x = Results{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Music_Researcher_api_music_researcher_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Results) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Results) ProtoMessage() {}

func (x *Results) ProtoReflect() protoreflect.Message {
	mi := &file_Music_Researcher_api_music_researcher_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Results.ProtoReflect.Descriptor instead.
func (*Results) Descriptor() ([]byte, []int) {
	return file_Music_Researcher_api_music_researcher_proto_rawDescGZIP(), []int{3}
}

func (x *Results) GetAlbums() []*Album {
	if x != nil {
		return x.Albums
	}
	return nil
}

func (x *Results) GetArtists() []*Artist {
	if x != nil {
		return x.Artists
	}
	return nil
}

func (x *Results) GetTracks() []*Track {
	if x != nil {
		return x.Tracks
	}
	return nil
}

type Artist struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID         string   `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name       string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	SpotifyUrl string   `protobuf:"bytes,3,opt,name=spotifyUrl,proto3" json:"spotifyUrl,omitempty"`
	ImageUrl   string   `protobuf:"bytes,4,opt,name=imageUrl,proto3" json:"imageUrl,omitempty"`
	Genres     []string `protobuf:"bytes,5,rep,name=genres,proto3" json:"genres,omitempty"`
}

func (x *Artist) Reset() {
	*x = Artist{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Music_Researcher_api_music_researcher_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Artist) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Artist) ProtoMessage() {}

func (x *Artist) ProtoReflect() protoreflect.Message {
	mi := &file_Music_Researcher_api_music_researcher_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Artist.ProtoReflect.Descriptor instead.
func (*Artist) Descriptor() ([]byte, []int) {
	return file_Music_Researcher_api_music_researcher_proto_rawDescGZIP(), []int{4}
}

func (x *Artist) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *Artist) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Artist) GetSpotifyUrl() string {
	if x != nil {
		return x.SpotifyUrl
	}
	return ""
}

func (x *Artist) GetImageUrl() string {
	if x != nil {
		return x.ImageUrl
	}
	return ""
}

func (x *Artist) GetGenres() []string {
	if x != nil {
		return x.Genres
	}
	return nil
}

type Album struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID          string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	SpotifyUrl  string `protobuf:"bytes,3,opt,name=spotifyUrl,proto3" json:"spotifyUrl,omitempty"`
	ImageUrl    string `protobuf:"bytes,4,opt,name=imageUrl,proto3" json:"imageUrl,omitempty"`
	ReleaseDate string `protobuf:"bytes,5,opt,name=releaseDate,proto3" json:"releaseDate,omitempty"`
}

func (x *Album) Reset() {
	*x = Album{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Music_Researcher_api_music_researcher_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Album) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Album) ProtoMessage() {}

func (x *Album) ProtoReflect() protoreflect.Message {
	mi := &file_Music_Researcher_api_music_researcher_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Album.ProtoReflect.Descriptor instead.
func (*Album) Descriptor() ([]byte, []int) {
	return file_Music_Researcher_api_music_researcher_proto_rawDescGZIP(), []int{5}
}

func (x *Album) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *Album) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Album) GetSpotifyUrl() string {
	if x != nil {
		return x.SpotifyUrl
	}
	return ""
}

func (x *Album) GetImageUrl() string {
	if x != nil {
		return x.ImageUrl
	}
	return ""
}

func (x *Album) GetReleaseDate() string {
	if x != nil {
		return x.ReleaseDate
	}
	return ""
}

type Track struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID         string    `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name       string    `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	SpotifyUrl string    `protobuf:"bytes,3,opt,name=spotifyUrl,proto3" json:"spotifyUrl,omitempty"`
	Album      *Album    `protobuf:"bytes,4,opt,name=album,proto3" json:"album,omitempty"`
	Artists    []*Artist `protobuf:"bytes,5,rep,name=artists,proto3" json:"artists,omitempty"`
	DurationMs int32     `protobuf:"varint,6,opt,name=durationMs,proto3" json:"durationMs,omitempty"`
	PreviewUrl string    `protobuf:"bytes,7,opt,name=previewUrl,proto3" json:"previewUrl,omitempty"`
	Popularity int32     `protobuf:"varint,8,opt,name=popularity,proto3" json:"popularity,omitempty"`
}

func (x *Track) Reset() {
	*x = Track{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Music_Researcher_api_music_researcher_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Track) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Track) ProtoMessage() {}

func (x *Track) ProtoReflect() protoreflect.Message {
	mi := &file_Music_Researcher_api_music_researcher_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Track.ProtoReflect.Descriptor instead.
func (*Track) Descriptor() ([]byte, []int) {
	return file_Music_Researcher_api_music_researcher_proto_rawDescGZIP(), []int{6}
}

func (x *Track) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *Track) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Track) GetSpotifyUrl() string {
	if x != nil {
		return x.SpotifyUrl
	}
	return ""
}

func (x *Track) GetAlbum() *Album {
	if x != nil {
		return x.Album
	}
	return nil
}

func (x *Track) GetArtists() []*Artist {
	if x != nil {
		return x.Artists
	}
	return nil
}

func (x *Track) GetDurationMs() int32 {
	if x != nil {
		return x.DurationMs
	}
	return 0
}

func (x *Track) GetPreviewUrl() string {
	if x != nil {
		return x.PreviewUrl
	}
	return ""
}

func (x *Track) GetPopularity() int32 {
	if x != nil {
		return x.Popularity
	}
	return 0
}

var File_Music_Researcher_api_music_researcher_proto protoreflect.FileDescriptor

var file_Music_Researcher_api_music_researcher_proto_rawDesc = []byte{
	0x0a, 0x2b, 0x4d, 0x75, 0x73, 0x69, 0x63, 0x2d, 0x52, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x65, 0x72, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x5f, 0x72, 0x65, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x6d,
	0x75, 0x73, 0x69, 0x63, 0x72, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x72, 0x22, 0x07,
	0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x23, 0x0a, 0x09, 0x47, 0x65, 0x6e, 0x72, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x47, 0x65, 0x6e, 0x72, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x47, 0x65, 0x6e, 0x72, 0x65, 0x73, 0x22, 0x5c, 0x0a, 0x0a,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x12, 0x22, 0x0a, 0x0c, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x9c, 0x01, 0x0a, 0x07, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x2e, 0x0a, 0x06, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x72, 0x65,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x72, 0x2e, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x52, 0x06,
	0x61, 0x6c, 0x62, 0x75, 0x6d, 0x73, 0x12, 0x31, 0x0a, 0x07, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x72,
	0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x72, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74,
	0x52, 0x07, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x73, 0x12, 0x2e, 0x0a, 0x06, 0x74, 0x72, 0x61,
	0x63, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x75, 0x73, 0x69,
	0x63, 0x72, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x63,
	0x6b, 0x52, 0x06, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x22, 0x80, 0x01, 0x0a, 0x06, 0x41, 0x72,
	0x74, 0x69, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x70, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x55, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x70,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x55, 0x72, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x55, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x55, 0x72, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x73, 0x22, 0x89, 0x01, 0x0a,
	0x05, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x70,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x55, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x73, 0x70, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x55, 0x72, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x65, 0x22, 0x8c, 0x02, 0x0a, 0x05, 0x54, 0x72, 0x61,
	0x63, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x70, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x55, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x70, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x55, 0x72, 0x6c, 0x12, 0x2c, 0x0a, 0x05, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x72, 0x65, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x72, 0x2e, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x52, 0x05, 0x61,
	0x6c, 0x62, 0x75, 0x6d, 0x12, 0x31, 0x0a, 0x07, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x72, 0x65, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x72, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x52, 0x07,
	0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x55, 0x72, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x55, 0x72, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x6f, 0x70, 0x75, 0x6c,
	0x61, 0x72, 0x69, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x6f, 0x70,
	0x75, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x2a, 0x35, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06,
	0x41, 0x52, 0x54, 0x49, 0x53, 0x54, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x4c, 0x42, 0x55,
	0x4d, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x52, 0x41, 0x43, 0x4b, 0x10, 0x03, 0x32, 0x9a,
	0x01, 0x0a, 0x0f, 0x4d, 0x75, 0x73, 0x69, 0x63, 0x52, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x65, 0x72, 0x12, 0x41, 0x0a, 0x06, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x1b, 0x2e, 0x6d,
	0x75, 0x73, 0x69, 0x63, 0x72, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x72, 0x2e, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x1a, 0x18, 0x2e, 0x6d, 0x75, 0x73, 0x69,
	0x63, 0x72, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x47, 0x65, 0x6e, 0x72,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x16, 0x2e, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x72, 0x65, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1a, 0x2e,
	0x6d, 0x75, 0x73, 0x69, 0x63, 0x72, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x72, 0x2e,
	0x47, 0x65, 0x6e, 0x72, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x42, 0x36, 0x5a, 0x34, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x44, 0x61, 0x64, 0x61, 0x72, 0x64,
	0x32, 0x39, 0x2f, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x2d, 0x72, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x65, 0x72, 0x2f, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x72, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_Music_Researcher_api_music_researcher_proto_rawDescOnce sync.Once
	file_Music_Researcher_api_music_researcher_proto_rawDescData = file_Music_Researcher_api_music_researcher_proto_rawDesc
)

func file_Music_Researcher_api_music_researcher_proto_rawDescGZIP() []byte {
	file_Music_Researcher_api_music_researcher_proto_rawDescOnce.Do(func() {
		file_Music_Researcher_api_music_researcher_proto_rawDescData = protoimpl.X.CompressGZIP(file_Music_Researcher_api_music_researcher_proto_rawDescData)
	})
	return file_Music_Researcher_api_music_researcher_proto_rawDescData
}

var file_Music_Researcher_api_music_researcher_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_Music_Researcher_api_music_researcher_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_Music_Researcher_api_music_researcher_proto_goTypes = []interface{}{
	(Type)(0),          // 0: musicresearcher.Type
	(*Empty)(nil),      // 1: musicresearcher.Empty
	(*GenreList)(nil),  // 2: musicresearcher.GenreList
	(*Parameters)(nil), // 3: musicresearcher.Parameters
	(*Results)(nil),    // 4: musicresearcher.Results
	(*Artist)(nil),     // 5: musicresearcher.Artist
	(*Album)(nil),      // 6: musicresearcher.Album
	(*Track)(nil),      // 7: musicresearcher.Track
}
var file_Music_Researcher_api_music_researcher_proto_depIdxs = []int32{
	6, // 0: musicresearcher.Results.albums:type_name -> musicresearcher.Album
	5, // 1: musicresearcher.Results.artists:type_name -> musicresearcher.Artist
	7, // 2: musicresearcher.Results.tracks:type_name -> musicresearcher.Track
	6, // 3: musicresearcher.Track.album:type_name -> musicresearcher.Album
	5, // 4: musicresearcher.Track.artists:type_name -> musicresearcher.Artist
	3, // 5: musicresearcher.MusicResearcher.Search:input_type -> musicresearcher.Parameters
	1, // 6: musicresearcher.MusicResearcher.GetGenreList:input_type -> musicresearcher.Empty
	4, // 7: musicresearcher.MusicResearcher.Search:output_type -> musicresearcher.Results
	2, // 8: musicresearcher.MusicResearcher.GetGenreList:output_type -> musicresearcher.GenreList
	7, // [7:9] is the sub-list for method output_type
	5, // [5:7] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_Music_Researcher_api_music_researcher_proto_init() }
func file_Music_Researcher_api_music_researcher_proto_init() {
	if File_Music_Researcher_api_music_researcher_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_Music_Researcher_api_music_researcher_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Music_Researcher_api_music_researcher_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenreList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Music_Researcher_api_music_researcher_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Parameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Music_Researcher_api_music_researcher_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Results); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Music_Researcher_api_music_researcher_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Artist); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Music_Researcher_api_music_researcher_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Album); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Music_Researcher_api_music_researcher_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Track); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_Music_Researcher_api_music_researcher_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_Music_Researcher_api_music_researcher_proto_goTypes,
		DependencyIndexes: file_Music_Researcher_api_music_researcher_proto_depIdxs,
		EnumInfos:         file_Music_Researcher_api_music_researcher_proto_enumTypes,
		MessageInfos:      file_Music_Researcher_api_music_researcher_proto_msgTypes,
	}.Build()
	File_Music_Researcher_api_music_researcher_proto = out.File
	file_Music_Researcher_api_music_researcher_proto_rawDesc = nil
	file_Music_Researcher_api_music_researcher_proto_goTypes = nil
	file_Music_Researcher_api_music_researcher_proto_depIdxs = nil
}
